{"version":3,"sources":["components/nav.js","components/card.js","config.js","components/searchBar.js","components/weatherMainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","Navbar","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","WeatherCard","props","ano","valueProps","weather","temp","backgroundSetter","main","Card","text","style","width","display","backgroundColor","Header","Text","cityProps","dateProps","description","Body","Math","floor","humidity","wind","speed","config","cities","url","Config","SearchBar","useState","inputState","setInputState","suggestionList","setSuggestions","Form","Row","Col","md","span","offset","Control","placeholder","value","onChange","event","target","flusher","filter","e","toLowerCase","indexOf","autoComplete","onClick","dataset","console","log","map","i","key","data-value","substr","length","suggestionListShower","Button","type","onSubmit","WeatherMainComponent","state","dataMap","city","dataFetcher","bind","this","replace","Axios","get","then","resp","Map","data","list","forEach","size","has","dt_txt","split","set","setState","name","dataKeys","Array","from","keys","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UAuBeA,MApBf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,kBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,gBAKN,+B,sDC0CSQ,MAzDf,SAAqBC,GACnB,IAAIC,EAAM,iBAAmBD,EAAME,WAAWC,QAAQ,GAAGR,GAAK,aAC1DP,EA0CN,SAA0BgB,GACxB,GAAIA,GAAQ,GACV,MAAO,UACF,GAAIA,EAAO,IAAMA,EAAO,GAC7B,MAAO,UACF,GAAIA,EAAO,IAAMA,EAAO,GAC7B,MAAO,UACF,GAAIA,EAAO,GAAKA,EAAO,GAC5B,MAAO,UACF,GAAIA,GAAQ,EACjB,MAAO,UApDAC,CAAiBL,EAAME,WAAWI,KAAKF,MAChD,OACE,oCACE,kBAACG,EAAA,EAAD,CACEC,KAAK,OACLC,MAAO,CACLC,MAAO,QACPC,QAAS,cACTC,gBAAgB,GAAD,OAAKxB,IAEtBS,UAAU,2BAEV,kBAACU,EAAA,EAAKM,OAAN,KACE,kBAACN,EAAA,EAAKO,KAAN,KAAYd,EAAMe,WAClB,kBAACR,EAAA,EAAKO,KAAN,KAAYd,EAAMgB,WAClB,uBAAGnB,UAAWI,IACd,kBAACM,EAAA,EAAKO,KAAN,KAAYd,EAAME,WAAWC,QAAQ,GAAGc,cAE1C,kBAACV,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKO,KAAN,KACE,yBAAKjB,UAAU,QACb,0BAAMA,UAAU,eACbsB,KAAKC,MAAMpB,EAAME,WAAWI,KAAKF,OAEpC,0BAAMP,UAAU,oBAElB,yBAAKA,UAAU,YACb,uBAAGA,UAAU,mBACZG,EAAME,WAAWI,KAAKe,SAFzB,MAKA,yBAAKxB,UAAU,QACb,uBAAGA,UAAU,+BACZG,EAAME,WAAWoB,KAAKC,MAFzB,IAEgC,0BAAM1B,UAAU,OAAhB,c,gCCkE7B2B,EAxGF,CACXC,OAAQ,CACN,SACA,QACA,UACA,UACA,YACA,YACA,YACA,OACA,QACA,SACA,SACA,UACA,SACA,YACA,SACA,aACA,QACA,QACA,YACA,SACA,WACA,WACA,OACA,gBACA,aACA,qBACA,SACA,WACA,SACA,aACA,UACA,WACA,SACA,YACA,SACA,aACA,WACA,WACA,UACA,cACA,YACA,UACA,aACA,WACA,UACA,SACA,SACA,SACA,UACA,SACA,aACA,kBACA,OACA,SACA,WACA,WACA,WACA,UACA,gBACA,QACA,UACA,WACA,YACA,cACA,YACA,WACA,WACA,WACA,aACA,YACA,SACA,UACA,aACA,WACA,UACA,QACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,SACA,UACA,WACA,WACA,QACA,SACA,SACA,WACA,QACA,SACA,SACA,cACA,gBACA,UACA,WAEFC,IACE,4GCjGAD,G,MAASE,EAAOF,QAiFLG,MAhFf,SAAmB5B,GAAQ,IAAD,EACY6B,mBAAS,IADrB,mBACjBC,EADiB,KACLC,EADK,OAEiBF,mBAAS,IAF1B,mBAEjBG,EAFiB,KAEDC,EAFC,KAGxB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,yBAAK1C,UAAU,eAAeY,MAAO,CAAEC,MAAO,SAC5C,kBAACwB,EAAA,EAAKM,QAAN,CACEC,YAAY,YACZhC,MAAO,CAAEC,MAAO,MAAOC,QAAS,UAChC+B,MAAOZ,EACPa,SAAU,SAACC,GACTb,EAAca,EAAMC,OAAOH,OA8BzC,SAAsBE,GACpB,IAAIF,EAAQE,EAAMC,OAAOH,MACzB,IAAKA,EAEH,YADAI,IAGFb,EACER,EAAOsB,QAAO,SAACC,GACb,OAAOA,EAAEC,cAAcC,QAAQR,EAAMO,gBAAkB,MArC/CE,CAAaP,MAGjB,yBACEjD,GAAG,2BACHE,UAAU,qBACVY,MAAO,CAAEC,MAAO,QAChB0C,QAuCZ,SAAwBR,GAClBA,EAAMC,OAAOQ,QAAQX,QACvBX,EAAca,EAAMC,OAAOQ,QAAQX,OACnCI,OAKN,SAA8Bd,EAAgBF,GAE5C,OADAwB,QAAQC,IAAIvB,EAAgBF,GACrBE,EAAewB,KAAI,SAACR,EAAGS,GAC5B,OACE,yBAAKC,IAAKD,EAAGE,aAAYX,GACvB,4BAAQW,aAAYX,GAAIA,EAAEY,OAAO,EAAG9B,EAAW+B,SAC9Cb,EAAEY,OAAO9B,EAAW+B,YAnDdC,CAAqB9B,EAAgBF,IAExC,kBAACiC,EAAA,EAAD,CACElE,UAAU,MACVR,QAAQ,UACR2E,KAAK,SACLZ,QAAS,WACPpD,EAAMiE,SAASnC,GACfC,EAAc,MANlB,YAaJ,kBAACK,EAAA,EAAD,QAkBN,SAASU,IACPb,EAAe,M,iBCAJiC,E,kDAxDb,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IACDmE,MAAQ,CAAEC,QAAS,GAAIC,KAAM,IAClC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAKF,KAAO,GALK,E,gEASjBG,KAAKF,gB,oCAG0B,IAAD,OAApBD,EAAoB,uDAAb,YACb3C,EAAMC,EAAOD,IAAI+C,QAAQ,IAAKJ,GAClCK,IAAMC,IAAIjD,GAAKkD,MAAK,SAACC,GAEnB,IAAIrB,EAAM,IAAIsB,IACdD,EAAKE,KAAKC,KAAKC,SAAQ,SAACjC,EAAGS,GACrBD,EAAI0B,KAAO,IAAM1B,EAAI2B,IAAInC,EAAEoC,OAAOC,MAAM,KAAK,MAC/C7B,EAAI8B,IAAItC,EAAEoC,OAAOC,MAAM,KAAK,GAAIrC,GAChCM,QAAQC,IAAIP,EAAEoC,OAAOC,MAAM,KAAK,QAGpC,EAAKE,SAAS,CACZnB,QAASZ,EACTa,KAAMQ,EAAKE,KAAKV,KAAKmB,OAGvBlC,QAAQC,IAAIsB,EAAKE,KAAKC,KAAK,GAAG1E,W,+BAGxB,IAAD,OACHmF,EAAWC,MAAMC,KACnBnB,KAAKL,MAAMC,mBAAmBU,KAAON,KAAKL,MAAMC,QAAQwB,QAG1D,OADAtC,QAAQC,IAAI,WAAYiB,KAAKH,MAE3B,oCACE,kBAAC,EAAD,CAAWJ,SAAUO,KAAKF,cAC1B,6BACA,6BACA,6BACCmB,GACCA,EAASjC,KAAI,SAACR,EAAGS,GAAJ,OACX,kBAAC,EAAD,CACEC,IAAKD,EACLzC,UAAWgC,EACX9C,WAAY,EAAKiE,MAAMC,QAAQO,IAAI3B,GACnCjC,UAAW,EAAKoD,MAAME,e,GAjDDwB,IAAMC,WCc1BC,MATf,WACE,OACE,yBAAKlG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.17e76cf4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nfunction Navigation() {\n  return (\n    <>\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Weather Report</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#features\">About Us</Nav.Link>\n            <Nav.Link href=\"#pricing\">Contct Us</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <br />\n    </>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./card.css\";\nfunction WeatherCard(props) {\n  let ano = \"wi wi-owm-day-\" + props.valueProps.weather[0].id + \" display-2\";\n  let bg = backgroundSetter(props.valueProps.main.temp);\n  return (\n    <>\n      <Card\n        text=\"dark\"\n        style={{\n          width: \"15rem\",\n          display: \"inline-flex\",\n          backgroundColor: `${bg}`,\n        }}\n        className=\"m-2 weather-widget warm\"\n      >\n        <Card.Header>\n          <Card.Text>{props.cityProps}</Card.Text>\n          <Card.Text>{props.dateProps}</Card.Text>\n          <i className={ano}></i>\n          <Card.Text>{props.valueProps.weather[0].description}</Card.Text>\n        </Card.Header>\n        <Card.Body>\n          <Card.Text>\n            <div className=\"temp\">\n              <span className=\"temp-number\">\n                {Math.floor(props.valueProps.main.temp)}\n              </span>\n              <span className=\"wi wi-degrees \"></span>\n            </div>\n            <div className=\"humidity\">\n              <i className=\"wi wi-raindrop\"></i>\n              {props.valueProps.main.humidity} %\n            </div>\n\n            <div className=\"wind\">\n              <i className=\"wi wi-small-craft-advisory\"></i>\n              {props.valueProps.wind.speed} <span className=\"vel\">Km/h</span>\n            </div>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n\nfunction backgroundSetter(temp) {\n  if (temp >= 30) {\n    return \"#fc6f03\";\n  } else if (temp > 20 && temp < 30) {\n    return \"#94fc03\";\n  } else if (temp > 10 && temp < 20) {\n    return \"#7aebd1\";\n  } else if (temp > 0 && temp < 10) {\n    return \"#a4d2ed\";\n  } else if (temp <= 0) {\n    return \"#f1e8fa\";\n  }\n}\nexport default WeatherCard;\n","let config = {\n  cities: [\n    \"Mumbai\",\n    \"Delhi\",\n    \"Kolkata\",\n    \"Chennai\",\n    \"Bangalore\",\n    \"Hyderabad\",\n    \"Ahmedabad\",\n    \"Pune\",\n    \"Surat\",\n    \"Jaipur\",\n    \"Kanpur\",\n    \"Lucknow\",\n    \"Nagpur\",\n    \"Ghaziabad\",\n    \"Indore\",\n    \"Coimbatore\",\n    \"Kochi\",\n    \"Patna\",\n    \"Kozhikode\",\n    \"Bhopal\",\n    \"Thrissur\",\n    \"Vadodara\",\n    \"Agra\",\n    \"Visakhapatnam\",\n    \"Malappuram\",\n    \"Thiruvananthapuram\",\n    \"Kannur\",\n    \"Ludhiana\",\n    \"Nashik\",\n    \"Vijayawada\",\n    \"Madurai\",\n    \"Varanasi\",\n    \"Meerut\",\n    \"Faridabad\",\n    \"Rajkot\",\n    \"Jamshedpur\",\n    \"Srinagar\",\n    \"Jabalpur\",\n    \"Asansol\",\n    \"Vasai-Virar\",\n    \"Allahabad\",\n    \"Dhanbad\",\n    \"Aurangabad\",\n    \"Amritsar\",\n    \"Jodhpur\",\n    \"Ranchi\",\n    \"Raipur\",\n    \"Kollam\",\n    \"Gwalior\",\n    \"Bhilai\",\n    \"Chandigarh\",\n    \"Tiruchirappalli\",\n    \"Kota\",\n    \"Mysore\",\n    \"Bareilly\",\n    \"Tiruppur\",\n    \"Guwahati\",\n    \"Solapur\",\n    \"Hubli-Dharwad\",\n    \"Salem\",\n    \"Aligarh\",\n    \"Gurugram\",\n    \"Moradabad\",\n    \"Bhubaneswar\",\n    \"Jalandhar\",\n    \"Warangal\",\n    \"Bhiwandi\",\n    \"Siliguri\",\n    \"Saharanpur\",\n    \"Gorakhpur\",\n    \"Guntur\",\n    \"Cuttack\",\n    \"Puducherry\",\n    \"Amravati\",\n    \"Bikaner\",\n    \"Noida\",\n    \"Mangalore\",\n    \"Belagavi\",\n    \"Bhavnagar\",\n    \"Firozabad\",\n    \"Jamnagar\",\n    \"Durgapur\",\n    \"Malegaon\",\n    \"Bokaro\",\n    \"Nellore\",\n    \"Kolhapur\",\n    \"Raurkela\",\n    \"Ajmer\",\n    \"Nanded\",\n    \"Jhansi\",\n    \"Gulbarga\",\n    \"Erode\",\n    \"Ujjain\",\n    \"Sangli\",\n    \"Tirunelveli\",\n    \"Muzaffarnagar\",\n    \"Vellore\",\n    \"Kurnool\",\n  ],\n  url:\n    \"https://api.openweathermap.org/data/2.5/forecast?q=^&units=metric&appid=5e9030ba403e3e0e94bef1a417f77766\",\n};\nexport default config;\n","import React, { useState } from \"react\";\nimport { Form, Col, Button } from \"react-bootstrap\";\nimport Config from \"../config\";\nimport \"./searchBar.css\";\n\nlet cities = Config.cities;\nfunction SearchBar(props) {\n  const [inputState, setInputState] = useState(\"\");\n  const [suggestionList, setSuggestions] = useState([]);\n  return (\n    <Form>\n      <Form.Row>\n        <Col md={{ span: 6, offset: 3 }}>\n          <div className=\"autocomplete\" style={{ width: \"100%\" }}>\n            <Form.Control\n              placeholder=\"City name\"\n              style={{ width: \"70%\", display: \"inline\" }}\n              value={inputState}\n              onChange={(event) => {\n                setInputState(event.target.value);\n                autoComplete(event);\n              }}\n            />\n            <div\n              id=\"myInputautocomplete-list\"\n              className=\"autocomplete-items\"\n              style={{ width: \"100%\" }}\n              onClick={choiceSelector}\n            >\n              {suggestionListShower(suggestionList, inputState)}\n            </div>\n            <Button\n              className=\"m-2\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                props.onSubmit(inputState);\n                setInputState(\"\");\n              }}\n            >\n              Submit\n            </Button>\n          </div>\n        </Col>\n        <Col></Col>\n      </Form.Row>\n    </Form>\n  );\n\n  function autoComplete(event) {\n    let value = event.target.value;\n    if (!value) {\n      flusher();\n      return;\n    }\n    setSuggestions(\n      cities.filter((e) => {\n        return e.toLowerCase().indexOf(value.toLowerCase()) > -1;\n      })\n    );\n  }\n\n  function flusher() {\n    setSuggestions([]);\n  }\n\n  function choiceSelector(event) {\n    if (event.target.dataset.value) {\n      setInputState(event.target.dataset.value);\n      flusher();\n    }\n  }\n}\n\nfunction suggestionListShower(suggestionList, inputState) {\n  console.log(suggestionList, inputState);\n  return suggestionList.map((e, i) => {\n    return (\n      <div key={i} data-value={e}>\n        <strong data-value={e}>{e.substr(0, inputState.length)}</strong>\n        {e.substr(inputState.length)}\n      </div>\n    );\n  });\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport WeatherCard from \"./card\";\nimport SearchBar from \"./searchBar\";\nimport Axios from \"axios\";\nimport Config from \"../config\";\n\nclass WeatherMainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dataMap: \"\", city: \"\" };\n    this.dataFetcher = this.dataFetcher.bind(this);\n    // this.dataMap = \"\";\n    this.city = \"\";\n  }\n\n  componentDidMount() {\n    this.dataFetcher();\n  }\n\n  dataFetcher(city = \"Bengaluru\") {\n    let url = Config.url.replace(\"^\", city);\n    Axios.get(url).then((resp) => {\n      //   console.log(resp.data);\n      let map = new Map();\n      resp.data.list.forEach((e, i) => {\n        if (map.size < 5 && !map.has(e.dt_txt.split(\" \")[0])) {\n          map.set(e.dt_txt.split(\" \")[0], e);\n          console.log(e.dt_txt.split(\" \")[0]);\n        }\n      });\n      this.setState({\n        dataMap: map,\n        city: resp.data.city.name,\n      });\n\n      console.log(resp.data.list[0].main);\n    });\n  }\n  render() {\n    let dataKeys = Array.from(\n      this.state.dataMap instanceof Map && this.state.dataMap.keys()\n    );\n    console.log(\"city is \", this.city);\n    return (\n      <>\n        <SearchBar onSubmit={this.dataFetcher} />\n        <br />\n        <br />\n        <br />\n        {dataKeys &&\n          dataKeys.map((e, i) => (\n            <WeatherCard\n              key={i}\n              dateProps={e}\n              valueProps={this.state.dataMap.get(e)}\n              cityProps={this.state.city}\n            />\n          ))}\n      </>\n    );\n  }\n}\n\nexport default WeatherMainComponent;\n","import React from \"react\";\n\nimport \"owfont/css/owfont-regular.min.css\";\nimport \"weather-icons/css/weather-icons.min.css\";\nimport \"weather-icons/css/weather-icons-wind.min.css\";\nimport \"./App.css\";\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import Weather from \"./components/weatherMainComponent\";\nimport Nav from \"./components/nav\";\nimport WeatherMainComponent from \"./components/weatherMainComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <WeatherMainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}